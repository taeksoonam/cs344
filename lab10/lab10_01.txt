a) I will rather choose Keras over TensorFlow. That is because Kerais itself is built on top of TensorFlow with a lot of defaults. On the other hand, TensorFlow requires an user to specify
parameters and to be detail-oriented.

b) Task 1:

 dnn_regressor = train_nn_regression_model(
    learning_rate=0.001,
    steps=1000,
    batch_size=100,
    hidden_units=[10, 5],
    training_examples=training_examples,
    training_targets=training_targets,
    validation_examples=validation_examples,
    validation_targets=validation_targets)

I have tried to decrease the learning rate and increased step sizes, batch size and hidden_units, and the best RMSE that I was able to get was 124.47. 
I mimicked the methodology from the solution in the guide.

Task 2:


california_housing_test_data = pd.read_csv("https://download.mlcc.google.com/mledu-datasets/california_housing_test.csv", sep=",")

  test_examples = preprocess_features(california_housing_test_data)
  test_targets = preprocess_targets(california_housing_test_data)

  predict_testing_input_fn = lambda: my_input_fn(test_examples,
                                                 test_targets["median_house_value"],
                                                 num_epochs=1,
                                                 shuffle=False)

  test_predictions = dnn_regressor.predict(input_fn=predict_testing_input_fn)
  test_predictions = np.array([item['predictions'][0] for item in test_predictions])

  root_mean_squared_error = math.sqrt(
      metrics.mean_squared_error(test_predictions, test_targets))

  print("Final RMSE (on test data): %0.2f" % root_mean_squared_error)

The final RMSE was  127.62